var documenterSearchIndex = {"docs":
[{"location":"#SimpleDrawing","page":"SimpleDrawing","title":"SimpleDrawing","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"This package provides some convenient drawing tools derived from the Plots module. It also defines the draw() function that can be extended by other modules such as  DrawSimpleGraphs and HyperbolicPlane.","category":"page"},{"location":"#General-Functions","page":"SimpleDrawing","title":"General Functions","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"newdraw() presents a blank canvas on which to draw (and erases anything that's already in that window).\nfinish() ensures that the figure appears on the screen with aspect ratio equal to 1, and that we hide the axes, grid, and legend.\ndraw() does nothing. It is a placeholder function for other modules to override.\nexpand_canvas(factor=0.05) expands the drawing area.\nresize_gr_window(wide=800,tall=600) changes the size of the GR window.","category":"page"},{"location":"#Drawing-Specific-Shapes","page":"SimpleDrawing","title":"Drawing Specific Shapes","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"draw_point(x::Real,y::Real;opts...) plots a point (small disk). This may also be invoked as draw_point(z::Complex). If plist is a list of complex numbers, may also use draw_point(plist) to draw all those points.\ndraw_segment(x::Real,y::Real,xx::Real,yy::Real;opts...) draws a line segment from (x,y) to (xx,yy). May also be invoked as draw_segment(z::Complex,zz::Complex).\ndraw_vector(x::Real,y::Real) draws a vector from (0,0) to (x,y). A different base point may be specified draw_vector(x,y,basex,basey) in which case the vector starts at (basex,basey) and extends to (basex+x,basey+y). This may also be used with complex arguments: draw_vector(z) and draw_vector(z, basez).\ndraw_arc(x::Real,y::Real,r::Real,t1::Real,t2::Real;opts...) draws an arc of a circle centered at (x,y), with radius r, and arcing between angles t1 and t2.\ndraw_arc(a::Complex,b::Complex,c::Complex;opts...) draws the arc with end points a and c passing through b.\ndraw_circle(x::Real,y::Real,r::Real;opts...) draws a circle centered at (x,y) with radius r. Also draw_circle(z::Complex,r::Real;opts...).\ndraw_disc works just like draw_circle, but the interior is filled. Try, for example, draw_disc(0,1,3; color=:yellow, linecolor=:red).\ndraw_ellipse(x, y, rx, ry) draw an ellipse centered at (x,y) with x-radius rx and y-radius ry. Center may be replaced with a complex number: draw_ellipse(z, rx, ry).\ndraw_filled_ellipse is just like draw_ellipse, but the interior is colored in. \ndraw_curve(pts;opts...) draws a curve through the points specified by pts, a one-dimensional array of complex numbers. By default, this gives a closed curve. To draw an open curve, use draw_curve(pts,false;opts...)\ndraw_rectangle(x::Real,y::Real,xx::Real,yy::Real;opts...) draws a rectangle with corners (x,y) and (xx,yy). Also available as draw_rectangle(w::Complex,z::Complex).\ndraw_polygon(xs, ys; opts...) draws a closed polygon based on the lists of  real coordinates xs and ys. Also available as draw_polygon(zs; opts) where zs  is a list of complex numbers. ","category":"page"},{"location":"#Drawing-Coordinate-Axes","page":"SimpleDrawing","title":"Drawing Coordinate Axes","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"The functions draw_xaxis and draw_yaxis can be used to create axes for figure. We assume that the axes emanate from the origin.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"draw_xaxis(x) draws an axis from the origin to (x,0).\ndraw_xaxis(x1,x2) is equivalent to calling draw_xaxis(x1) and then draw_xaxis(x2).\ndraw_xaxis() draws a pair of x-axes extended 10% further than the values returned by xlims(). The function draw_yaxis() has analogous behavior.\nA call to draw_axes() invokes draw_xaxis() and draw_yaxis().","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"The functions draw_xtick and draw_ytick can be used to make small  tick marks on the axes.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"draw_xtick(x,len) draws a small tick mark with total length len at the point x on the x-axis.\ndraw_xtick(xlist,len) calls draw_xtick for the values in xlist.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"If len is omitted, a default value is used. The function draw_ytick  works analogously. ","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"The size of the drawing area can be determined with the function corners  which returns the lower left and upper right corners of the drawing area as a pair of complex numbers. (See xlims and ylims in the Plots module.)","category":"page"},{"location":"#Example","page":"SimpleDrawing","title":"Example","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"julia> using Plots, SimpleDrawing\njulia> plot(sin,-5,5,linewidth=2,color=:black)\njulia> draw_xaxis()\njulia> draw_yaxis()\njulia> draw_xtick(-5:5)\njulia> finish()","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"(Image: )","category":"page"},{"location":"#Supporting-Functions","page":"SimpleDrawing","title":"Supporting Functions","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"find_center(a,b,c) returns the center of the circle that passes through","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"the three points (represented as complex numbers). Returns inf + inf*im if the points are collinear.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"non_collinear_check(a,b,c) checks if the three points (represented as complex numbers) are noncollinear; returns true if so and false if they are collinear (including if two are the same).","category":"page"},{"location":"#Spying-a-Matrix","page":"SimpleDrawing","title":"Spying a Matrix","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"my_spy(A) creates a black-and-white image representing the matrix A in which nonzero entries are black squares and zeros are white squares.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"For example, if the matrix is this:","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"julia> A\n5Ã—8 Array{Int64,2}:\n 1  1  0  0  1  1  1  0\n 1  0  1  0  0  1  1  1\n 0  1  0  1  1  0  1  0\n 0  1  0  1  0  1  1  1\n 1  1  1  1  0  0  1  0","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"then my_spy(A) creates this image:","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"(Image: )","category":"page"},{"location":"#Example-2","page":"SimpleDrawing","title":"Example","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"using SimpleDrawing, Plots\nnewdraw()\ndraw_circle(1,1,2; color=:red)\ndraw_arc(2,1,1,0,pi; color=:blue, linestyle=:dash)\ndraw_segment(-1+im,1+im; color=:green, linestyle=:dot)\nsavefig(\"example.png\")","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"(Image: )","category":"page"},{"location":"#Splines","page":"SimpleDrawing","title":"Splines","text":"","category":"section"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"The implementation of draw_curve relies on cubic splines. Let y be an n-long array of numbers. Then use one of these to create an interpolating spline:","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"S = Spline(y,:open) for an open-ended spline.\nS = Spline(y,:closed) for a periodic spline.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"In both cases, S(1)==y[1] through S(n)==y[n]. For closed splines, however, S(n+1)==y[1] and so forth.","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"Note that while S can be applied like a function, if is not a Julia Function. Thus plot(S,1,4) won't work. To convert a spline to a callable function, use funk(S).","category":"page"},{"location":"","page":"SimpleDrawing","title":"SimpleDrawing","text":"The derivative of S is available as S'. The derivative is also of type Spline; to plot its values over the interval [a,b], use plot(funk(S'),a,b).","category":"page"}]
}
